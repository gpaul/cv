// This is the Curriculum vitae of Gustav Paul, I hope you enjoy the read.
//
// I'm passionate about building distributed systems using Golang and Linux.
// If I get to run 'perf top' or 'iostat' in a day, it was a good day. If I
// had to run both, it was a great day. 
//
// I particularly enjoy distributed
// systems because of the similarity to discrete mathematics. The area feels untamed
// and intuition plays a large part in designing solutions. There are always trade-offs in
// software and never are they more stark than in distributed systems design.
// I love that you need to work your way through distributed systems reading lists
// and academic papers to gain insight into the field and never tire of the issues
// raised by having multiple timelines coincide. It is really difficult, and incredibly satisying work.
//
// My career has been quite a ride. I started working as a web developer when
// Ruby on Rails v1.0 was still a distant dream. A high school kid working as his
// elder brother's aide. This segwayed into a few years of contract work for a
// really cool guy - Brian Johnson of Zaadz.com and PhilosophersNotes.com fame. This work - done during
// high school - saw me buying my own car before I was old enough to drive it -
// an achievement I'm very proud of.
//
// After school I enrolled in a part-time BSc in Mathematics. During this time I
// did contract work for ArtisanTech. I built a Business Intelligence template for Barquin International. 
// Our main clients were the NIFA and USDA, but customising the template for other customers
// took very little time once I'd automated all the interesting parts. This made everyone else
// really happy but at this point I felt like I'd automated away all the interesting work.
// Anyway, the template was built using JRuby and Rails. Here I got my first taste
// of real back-end  work when I wrapped the Mondrian Java library in a JRuby
// query builder. We had lots of fun and Tom is a really cool guy. Eventually Albert Strasheim approached
// me to join his team and seeing as I'd automated myself out of an interesting job and 
// into a pretty mundane one, my curiousity got the better of me.
//
// Albert and his expert mix of systems guys were building a massive scale
// distributed database optimised for insertion. It is loosely based on the
// Google File System (GFS) but simplified through stricter assumptions, with
// fewer single points of failure. I did a short stint of vacation work with
// Albert. It's odd calling it that as I was still working four hours per day as
// a contractor for ArtisanTech. I took a break from afternoon studies for a few weeks to work with
// Albert, too. Four weeks was long enough to completely wet my appetite.
//
// In November 2011 I wrote my final undergraduate exams, completing the three
// year degree in the minimum three years and joined Albert and his team where
// I still work today.
//
// I've had the pleasure of eagerly awaiting the Golang 1.0 release and toast
// to the announcement on golang-dev. I've watched systemd grow from adequate
// and promising to the polarising centerpiece it is today. I was surprised by
// the new arrivals Docker, Kafka, and SaltStack, all of which scratch itches
// I've had to scratch myself.
//
// I think the next few years will be a very interesting time to be a systems
// programmer and look forward to being a part of that.
package cv

const (
	// Personal details
	Name = "Gustav"
	Surname = "Paul"
	DateOfBirth = "1989-12-19"

	// On the web
	Email = "gustav.paul@gmail.com"
	Github = "http://github.com/gpaul"
	HighestEducation = "Mathematics BSc"
	CurrentEducation = "Applied Mathematics: Part-time honours"
)

// VT as a company provides network recording solutions to law enforcement agencies.
// This entails processing and storing many gigabits per second of data.
//
// My work entails enhancing our proprietary distributed database. I've
// touched most of the codebase but take ownership of the storage, replication
// and distributed retrieval subsystems.  I also do much of the system
// administration for the project namely generating netboot images, remote orchestration,
// etc.
//
// The various functions on this struct describe some of the work I do in more
// detail.
//
// I omit lots of smaller projects and other work where I'm involved in a more 
// general 'team member helping move us forward' capacity.
type A_VT struct {}

// I started working for VT in Nov, 2011 and am still doing so very happily.
func (*A_VT) Duration() {}

// SwissArmyKnife is a remote orchestration tool I wrote as my first project
// on the team. It distributes tasks over SSH and displays the results. Tasks
// are written in Golang and the parser for the instructions is generated by http://code.google.com/p/gocc.  
func (*A_VT) SwissArmyKnife() {}

// NetbootImages are used extensively inside VT. When I started on this
// project I investigated chef, puppet and later vagrant. We didn't like the
// idea of a single master, nor installing to bare metal.
//
// Our software runs mostly unassisted in remote locations that are not
// connected to the internet so requiring minimal support from ops is very important to us. 
// For this reason we decided to go with readonly root filesystems 
// that we boot from disk or boot via PXE depending on the site and its requirements.
// 
// We opted for Fedora as it is as stable as cutting edge can be, it adopted systemd hook line and sinker, and it has excellent support for running with a readonly filesystem.
// It is now my favourite distro and I run Fedora19 on my laptop. I have fond memories of ArchLinux but I don't miss rolling releases and waking up to find X Windows has stopped working.
//
// We have three different server configurations, each with a different role. These all require similar but subtly different netboot images. 
// To simplify the generation of these images I built a tool called Gendeploy.
// Originally a well-refactored golang clone of a big shell-script, it has since grown into a JSON-configurable image generation tool.
// Most recently it spawned a little web GUI that let's our ops personnel define new sites, generate netboot images and download an appropriately laid out tarball to take to site for installation.
// They really dig it, so do I.
func (*A_VT) NetbootImages() {}

// On top of our block store, we built a tuple store. Through the herculian efforts of my 
// colleagues it has since grown into a full document store - the distinguishing feature being the ability to store and deeply query nested data types.
//
// Distributed retrieval of documents matching a user query is obviously quite involved.
// A centralised query process is spawned. It connects to query executor services on all the nodes in the cluster.
// This per-node service is called the 'FindTups'.
//
// The FindTups maintains a mapping of document types to storage blocks.
// This mapping is used to determine which storage blocks potentially contain data the user is interested in.
// Once this list is compiled, the blocks are retrieved from the storage subsystem. 
// They are then table scanned in time order to keep as few blocks in memory at any given time as possible.
// All matching documents are streamed to the central query process, along with progress updates.
//
// Having distributed its query to all the FindTups services in the cluster, the centralised query process now merges result streams from all the nodes in the cluster into a single time-ordered stream of results.
// These results are streamed directly to the user as protocol buffers or stored on disk in the case of asynchronous queries.
//
// Of this I built the current version of the FindTups, the distribution of queries to the FindTups, and the centralized merging of streams of results. 
//
// The encoding, decoding and matching of individual documents from storage blocks is incredibly complex and I had very little to do with that.
func (*A_VT) FindTups() {}

// The Replicator runs on every storage-capable node in the cluster. 
// The various replicator services maintain connections to one another and 
// share their initial local state when they first connect. Once connected they notify one another of updates
// to their block store as these occur.
// There is no single point of failure as they function fully peer-to-peer.
// Data blocks are transferred over InfiniBand.
// 
// For this project I experimented with using goroutines and channels to implement the logic as state machines.
// This implies using goroutines and channels around shared state instead of mutexes. I'm not convinced it makes for more maintainable code. 
//
// There seems to be a conflict in the language between
// interfaces as API and 'sharing state through communicating' using goroutines and channels.
// Mostly I'm tired of seeing "raw_spin_lock" at the top of my 'perf top' results.
func (*A_VT) Replicator() {}

// When Ruby on Rails was still very young I was involved in an open source meta framework for Rails called
// Hobo (http://www.hobocentral.net).
// They took a direction I didn't agree with - I can't recall exactly what it was - and I left.
// Years later I had just finished working for Brian Johnson on PhilosophersNotes.com and started poking
// around on the ruby job boards. One day Tom Locke mailed me: he remembered me from my previous involvement in his project, Hobo.
// It turns out that I had applied for a job posting his business partner at ArtisanTech had posted!
// Soon afterwards I started contracting for them and we worked together for three very cool years.
//
// At ArtisanTech I was involved in building a BI template that could be customised according to a clients' star schema.
// This involved
//
// dropping LucidDb in favour of the Infobright column store.
//
// integrating the Mondrian OLAP server with JRuby on Rails.
//
// writing a JRuby library (MDSL) that hides Mondrian's gritty Java API behind a ruby query builder that makes life a lot more pleasant.
//
// quite a bit of javascript, although I'd rather not do that again.
type B_ArtisanTech struct{}

// I contracted for ArtisanTech from 2009 - Nov, 2011. I worked 20 hours per week in the mornings, and studied my degree in the afternoons.
// I started my degree shortly before starting at ArtisanTech and finished my degree when I moved to VT.
func (*B_ArtisanTech) Duration() {}

// PhilosophersNotes is an ecommerce site where Brian Johnson sells PDFs and MP3s containing bits of wisdom he gleaned from 
// all kinds of books. This was my first proper contract as I was 17 at the time and just starting my penultimate year of high school.
// Brian had previously  built and sold eteamz (an amateur sports site) and Zaadz.com (an online conscious capitalism social network).
// My brother was working for Zaadz.com at the time and due to the sale Brian couldn't immediately hire him so he asked if
// my brother knew anyone competent. I was suggested, we had a meeting, and I started working for him.
// This was a very interesting journey - I had to learn an incredible amount in a short amount of time and
// the answer to "can you do X?" was always "sure, just give me a day or two to figure it out."
// Working alone and thrown in on the deep end you learn that Google is your friend.
//
// I was the web master, the system administrator, the front end developer and the backend database guy.
// I was also customer support and dealt with most customer queries, forwarding praise, refund requests and
// interesting customer support mails to Brian. I also subcontracted Design-to-HTML slicing work for Brian
// and integrated the results. I came away with the utmost
// respect for Brian as a manager and a super cool guy.
//
// The technology involved was fairly straightforward: Ruby on Rails, MySQL, and some web frontend stuff.
// This was when prototype.js and script.aculo.us was all the rage and jQuery was still very new with their 1.0 release
// a couple of months before I started working with Brian.
//
// The most interesting bits were,
//
// payment integration with first PayPal Express, then BrainTree, then Authorize.net.
//
// designing the subscription system to easily adapt to Brian's mercurial ideals of how people should pay for wisdom.
//
// amazon AWS integration for serving PDFs and MP3s.
//
// implementing a subscriber newsletter with around 20,000 subscribers, each receiving a newsletter at a schedule of their choosing.
//
// doing the relevant spamminess work such as configuring reverse dns, spf records, dkim signatures etc.
type C_PhilosophersNotes struct{}

// I worked on PhilosophersNotes from 2007 to 2009.
func (*C_PhilosophersNotes) Duration() {}
